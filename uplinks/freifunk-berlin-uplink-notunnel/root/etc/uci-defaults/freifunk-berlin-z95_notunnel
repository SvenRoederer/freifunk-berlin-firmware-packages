#!/bin/sh

THIS_UPLINKNAME="notunnel"

. /lib/functions/freifunk-berlin-network.sh 
. /lib/functions/guard.sh
. /lib/functions.sh

# always set correct masquerading, regardless of guard
uci set firewall.zone_ffuplink.masq=1
uci commit firewall

current_preset=$(uci get ffberlin-uplink.preset.current)
if [ ${current_preset} != ${THIS_UPLINKNAME} ]; then
  # do not track preset when it was 'undefined', aka never configured
  if [ ${current_preset} != "undefined" ]; then
    logger -t "ffuplink" "uplink-preset has been changed."
    uci set ffberlin-uplink.preset.previous=${current_preset}
    create_ffuplink
  fi
  uci set ffberlin-uplink.preset.current=${THIS_UPLINKNAME}
fi
# set set auth-type required for this uplink-type, e.g. for freifunk-wizard
uci set ffberlin-uplink.uplink.auth=none

macaddr=$(uci -q get ffberlin-uplink.uplink.macaddr)
if [ -z "$macaddr" ]; then
  macaddr=$(generate_random_mac_hex "fe")
  uci set ffberlin-uplink.uplink.macaddr=$macaddr
fi

uci commit ffberlin-uplink

guard "notunnel"

uci -q delete network.ffuplink_dev
uci set network.ffuplink_dev=device
uci set network.ffuplink_dev.type=veth
uci set network.ffuplink_dev.name=ffuplink
uci set network.ffuplink_dev.peer_name=ffuplink_wan
uci set network.ffuplink_dev.macaddr=$macaddr
uci commit network.ffuplink_dev

# add ffuplink_dev to br-wan if not there
## look for our uci-device section and add the kernel-device as bridge-port
add_kernelif_to_bridge() {
  local section="$1"
  local device="$2"
  local kernelif="$3"

  local thisdevice=$(uci get network.$section.name)
  if [ "$device" = "$thisdevice" ]; then
    ifnames=$(uci -q get network.$section.ports)
    list_contains ifnames "$kernelif" || uci add_list network.$section.ports=$kernelif
    uci commit network.$section
  fi
}

config_load network
config_foreach add_kernelif_to_bridge device br-wan ffuplink_wan

uci set network.ffuplink.proto=dhcp
uci set network.ffuplink.hostname=freifunk-$(echo $macaddr|tr -d :)-uplink
uci commit network.ffuplink
