#!/bin/sh

# ToDO: make it work mit more than one HNA4

[ "$INTERFACE" = wan ] && exit

. /lib/functions.sh
. /lib/functions/network.sh

log() {
	logger -t ff-policyrouting-ng "$1"
}

# returns network-address and prefix for device 
# $1 variable for result
# $2 device (LAN, wan, ...)
get_net_of_interface() {
	local net

	network_get_subnet net ${2}
	eval $(/bin/ipcalc.sh $net)
	eval "${1}=$NETWORK/$PREFIX"
}

# put all HNA4 UCI-sections into global variable Hna4_list
get_HNAnets() {
	config_cb() {
		local type="$1"
		local name="$2"

		if [ "$type" = "Hna4" ]; then
			echo "is Hna4 ($name)"
			Hna4_list="${Hna4_list} ${name}"
		fi
	}
}

is_hna_net() {
	log "checking if $1 is HNA-network"

	log "ip of $DEVICE: $IF_NET"



	config_load olsrd
	#config_foreach add_hnas Hna4 olsr-hnas
	#logger -t "pol-ng" "passed config_foreach"
	echo HNAs: $Hna4_list
	config_get hna_net $Hna4_list netaddr
	config_get hna_mask $Hna4_list netmask
	echo HNA4-net: $hna_net / $hna_mask
	eval  $(/bin/ipcalc.sh ${hna_net} ${hna_mask})
	hna_prefix=${PREFIX}
	log "ip of HNA4: $hna_net / $hna_prefix"

	if [ "$IF_NET" = "$hna_net/$hna_prefix" ]; then
		echo found HNA
		return 1
	fi
}

add_hna_routing() {
	local net=${1}
	local device=${2}

	cmd="ip route add $net dev $device table olsr-hnas"
	# ip list should return an exact route or nothing
	hna_route="$(ip route list exact ${net} dev $device table olsr-hnas)"
	if [ -z "${hna_route}" ]; then
		log "route needs to be added"
		$cmd
		if [ "$?" = 0 ]; then
			log -s "Added route: $cmd"
		else
			log -s "Error! Could not add route: $cmd"
		fi
	else
		log "correct routing-entry was already setup"
	fi

}

proto="4"
#[ -f /proc/net/ipv6_route ] && proto="4 6"

config_load freifunk-policyrouting
config_get enable pr enable
config_get fallback pr fallback
config_get strict pr strict
config_get zones pr zones

export Hna4_list=""
export IF_NET=""

get_net_of_interface IF_NET ${INTERFACE}
get_HNAnets

if [ "$ACTION" = "ifup" ] && [ "$enable" = "1" ]; then
	log "policyrouting running"
	is_hna_net ${INTERFACE}
	if [ $? ]; then
		log "interface ${INTERFACE} is a HNA-net, ensure correct routing for it ..."
		add_hna_routing $IF_NET $DEVICE
#		net=$(ip -4 addr show dev $ifname scope global|sed -n '2s,^[[:space:]]\+inet \([^[:space:]]\+\).*,\1,p')
#		eval $(/bin/ipcalc.sh $net)
	fi
fi

exit 0
	case $(uci get network.${INTERFACE}.proto) in none)
                # ubus status/netifd does not output ip4addr if proto=none
                net=$(ip -4 addr show dev ${DEVICE} scope global|sed -n '2s,^[[:space:]]\+inet \([^[:space:]]\+\).*,\1,p'
                #net6=$(ip -6 addr show dev ${DEVICE} scope global|sed -n '2s,^[[:space:]]\+inet6 \([^[:space:]]\+\).*,\1
        ;;*)
                network_get_subnet net $INTERFACE
                #network_get_subnet6 net6 $INTERFACE
        ;;esac
	logger -t ff-policyrouting-ng "working on net: ${net}"

	if [ "$net" != "" -a -n "${DEVICE}" ]; then
                eval $(/bin/ipcalc.sh $net)
		if [ "$PREFIX" != "0" -a "$NETWORK" != "127.0.0.0" ]; then
			if [ ! "$(ip route show table all |grep "$NETWORK/$PREFIX dev")" ]; then
				cmd="ip route add $NETWORK/$PREFIX dev ${DEVICE} table localnets"
				
			fi
		fi
	fi
