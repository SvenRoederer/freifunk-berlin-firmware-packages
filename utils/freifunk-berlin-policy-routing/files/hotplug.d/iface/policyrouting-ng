#!/bin/sh

. /lib/functions.sh
. /lib/functions/network.sh

IGNORE_INTERFACES=$(uci get freifunk-policyrouting.pr.ignore_interface)
list_contains IGNORE_INTERFACES $INTERFACE && exit

log() {
	logger -t ff-policyrouting-ng "$1"
}

# returns network-addresses and prefixes for device
# $1 variable for result (list of CDIRs)
# $2 device (LAN, wan, ...)
get_nets_of_interface() {
        local nets

        network_get_subnets nets ${2}
        eval "${1}='$nets'"
}

# returns True (1) when supplied network is part of a HNA-range
# $1 CIDR of network to test
is_hna_net() {
	local net=${1}
	local Hna4_list
	
	log "testing if $net is HNA-network"

	# lookup the UCI-sections for IPv4-HNAs when reading the UCI-file
	config_cb() {
		local type="$1"
		local name="$2"

		if [ "$type" = "Hna4" ]; then
			Hna4_list="${Hna4_list} ${name}"
		fi
	config_load olsrd

	if [ -z "$Hna4_list" ]; then
		log "Empty Hna4_list - nothing to do."
		return 0
	fi

	for hna_item in $Hna4_list; do
		config_get hna_net $hna_item netaddr
		config_get hna_mask $hna_item netmask
		#echo HNA4-net: $hna_net / $hna_mask
		eval  $(/bin/ipcalc.sh ${hna_net} ${hna_mask})
		hna_prefix=${PREFIX}
		log " ip of HNA4: $hna_net/$hna_prefix"

		if cidr_contains >/dev/null "$hna_net/$hna_prefix" "$net"; then
			#echo found HNA
			log " This is an HNA"
			return 1
		fi
	done
	log " This interface don't belong to a HNA4"
}

add_hna_routing() {
	local net=${1}
	local device=${2}

	cmd="ip route add $net dev $device table olsr-hnas"
	# ip list should return an exact route or nothing
	hna_route="$(ip route list exact ${net} dev $device table olsr-hnas)"
	if [ -z "${hna_route}" ]; then
		log "route needs to be added"
		$cmd
		if [ "$?" = 0 ]; then
			log " Added route: $cmd"
		else
			log " Error! Could not add route: $cmd"
		fi
	else
		log " correct routing-entry was already setup"
	fi

}

proto="4"
#[ -f /proc/net/ipv6_route ] && proto="4 6"

config_load freifunk-policyrouting
config_get enable pr enable
config_get fallback pr fallback
config_get strict pr strict
config_get zones pr zones

export Hna4_list=""
export IF_NETS=""

get_nets_of_interface IF_NETS ${INTERFACE}

if [ "$ACTION" = "ifup" ] && [ "$enable" = "1" ]; then
	log "policyrouting running"
	for net in ${IF_NETS}; do
		eval $(/bin/ipcalc.sh $net)
		net=${NETWORK}/${PREFIX}
		is_hna_net ${net}
		if [ ! $? = 0  ]; then
			log "interface ${INTERFACE} is a HNA-net, ensure correct routing for it ..."
			network_get_physdev DEVICE ${INTERFACE}
			add_hna_routing $net $DEVICE
		fi
	done
fi

exit 0
	case $(uci get network.${INTERFACE}.proto) in none)
                # ubus status/netifd does not output ip4addr if proto=none
                net=$(ip -4 addr show dev ${DEVICE} scope global|sed -n '2s,^[[:space:]]\+inet \([^[:space:]]\+\).*,\1,p'
                #net6=$(ip -6 addr show dev ${DEVICE} scope global|sed -n '2s,^[[:space:]]\+inet6 \([^[:space:]]\+\).*,\1
        ;;*)
                network_get_subnet net $INTERFACE
                #network_get_subnet6 net6 $INTERFACE
        ;;esac
	logger -t ff-policyrouting-ng "working on net: ${net}"

	if [ "$net" != "" -a -n "${DEVICE}" ]; then
                eval $(/bin/ipcalc.sh $net)
		if [ "$PREFIX" != "0" -a "$NETWORK" != "127.0.0.0" ]; then
			if [ ! "$(ip route show table all |grep "$NETWORK/$PREFIX dev")" ]; then
				cmd="ip route add $NETWORK/$PREFIX dev ${DEVICE} table localnets"
				
			fi
		fi
	fi
